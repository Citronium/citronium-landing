@NonCPS

def repositoryName  = 'citronium-landing'
def jenkinsURL      = 'https://jenkins.citronium.com/view/Base/job/citronium-landing/'
def chatId          = ''
def token           = ''

def branch        = env.BRANCH_NAME
def dockerRegistry  = "registry.citronium.com/${repositoryName}"
def imageTag

node {
    try {
      stage("Checkout") {
         git branch: "${branch}",
          url: 'git@github.com:Citronium/citronium-landing.git'
          
        def commit_hash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
        def now = new Date()
        imageTag = "${now.format('yyMMdd', TimeZone.getTimeZone('UTC'))}_${branch}_${BUILD_NUMBER}_${commit_hash}"
        imageTag = imageTag.toLowerCase()
        imageTag = imageTag.replaceAll('/', '_')
      }      
        
      stage("Start") {
        sendMessage("‚òë Build ‚Ññ${env.BUILD_NUMBER}: Start ${imageTag} ${env.JOB_URL} ${sendChangeLogs()}")
      }

      stage("Build") {
        sh "docker build -t ${dockerRegistry}:${imageTag} -f app/Dockerfile ."
      }

      stage("Push") {
        sh "docker push ${dockerRegistry}:${imageTag}"
      }  
      
      stage("Clear") {
        sh "rm -Rfv ./_site"
        sh "rm -Rfv ./html"
        sh "docker stop citronium-landing"
        sh "docker rm citronium-landing"
        sh "docker volume rm -f citronium-landing_citronium_landing"
      }
        
      stage("Docker start at psrv5") {
        sh "APP_VERSION=${imageTag} docker-compose -p citronium-landing -f app/docker-compose.yml up -d"
      }
        
      stage("Jekyll Build") {
        sh "docker volume create landing-tmp"
        sh "docker run -d --name citronium-landing-jekyll -v landing-tmp:/srv/jekyll jekyll/builder:3.8 tail -f /dev/null"
        sh "docker cp ./ citronium-landing-jekyll:/srv/jekyll/"        
        sh "mkdir html"
        sh "docker exec citronium-landing-jekyll jekyll build"        
        sh "docker rm citronium-landing-jekyll"
        sh "docker run -d --name citronium-landing-jekyll -v landing-tmp:/srv/jekyll jekyll/builder:3.8 tail -f /dev/null"        
        sh "docker cp citronium-landing-jekyll:/srv/jekyll/_site ./html"       
        sh "docker cp ./html citronium-landing:/var/www/"
        sh "docker restart citronium-landing"
        sh "docker stop citronium-landing-jekyll"
        sh "docker rm citronium-landing-jekyll"
        sh "docker volume rm landing-tmp"
      }  
        
        

     } catch(e) {
      sendMessage("üõ†‚ùå Build ${repositoryName} ‚Ññ${env.BUILD_NUMBER}: Error ${imageTag} ${e}")
      throw e
    }
}


def sendChangeLogs() {
    def commitMessages = ""
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            commitMessages = commitMessages + "\n> ${entry.author}: ${entry.msg} "
        }
    }
    return commitMessages
}

def sendMessage(message) {
    //sh(returnStdout: false, script: "curl -X POST -H 'Content-Type: application/json' -d '{\"chat_id\": \"${chatId}\", \"text\": \"${message}\", \"disable_notification\": true}' https://api.telegram.org/bot${token}/sendMessage")
}
